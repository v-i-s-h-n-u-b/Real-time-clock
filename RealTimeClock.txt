`timescale 1ns / 1ps

module Real_time_clock(
    input wire clk,          // 1 Hz clock signal
    input wire reset,        // Asynchronous reset
    output reg [5:0] seconds, // Seconds (0-59)
    output reg [5:0] minutes, // Minutes (0-59)
    output reg [4:0] hours    // Hours (0-23)
    );
	  always @(posedge clk or posedge reset) begin
        if (reset) begin
            seconds <= 0;
            minutes <= 0;
            hours <= 0;
        end else begin
		  // Increment seconds
            if (seconds == 59) begin
                seconds <= 0;
                // Increment minutes
                if (minutes == 59) begin
                    minutes <= 0;
                    // Increment hours
                    if (hours == 23) begin
                        hours <= 0;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule


module ClockDivider(
    input wire clk_in,   // Input clock signal (ex: 50 MHz)
    input wire reset,    // Asynchronous reset
    output reg clk_out   // 1 Hz output clock signal
);

    reg [25:0] counter; // 26-bit counter for 50 MHz to 1 Hz division
    
	 always @(posedge clk_in or posedge reset) begin
        if (reset) begin
            counter <= 0;
            clk_out <= 0;
        end else begin
            if (counter == 24999999) begin
                counter <= 0;
                clk_out <= ~clk_out; // Toggle output clock after counting first 25000000 cycles
            end else begin
                counter <= counter + 1;
            end
       end
    end

endmodule

module TopModule(
    input wire clk_in,  // Input clock signal (ex: 50 MHz)
    input wire reset,   // Asynchronous reset
    output wire [5:0] seconds, // Seconds (0-59)
    output wire [5:0] minutes, // Minutes (0-59)
    output wire [4:0] hours    // Hours (0-23)
    );

    wire clk_1hz;

    // Instantiate Clock Divider
    ClockDivider clock_divider (
        .clk_in(clk_in),
        .reset(reset),
        .clk_out(clk_1hz)
    );
	
   // Instantiate Real-Time Clock
    Real_time_clock rtc (
        .clk(clk_1hz),
        .reset(reset),
        .seconds(seconds),
        .minutes(minutes),
        .hours(hours)
    );

endmodule

